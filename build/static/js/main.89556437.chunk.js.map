{"version":3,"sources":["components/Elements/Header/Header.tsx","state/customPresetColors.ts","state/customFonts.ts","state/customColorSchemes.ts","state/index.ts","utils/helpers.ts","components/Elements/ColorBox/ColorBox.tsx","components/Elements/Headline/Headline.tsx","components/Elements/Box/Box.tsx","components/Elements/Button/Button.tsx","components/CustomColors/CustomColors.tsx","components/Elements/Content/Content.tsx","components/ConfigOutput/ConfigOutput.tsx","components/CustomFonts/CustomFonts.tsx","components/CustomColorSchemes/Preview.tsx","components/CustomColorSchemes/ColorOutput.tsx","components/CustomColorSchemes/Schema.tsx","components/CustomColorSchemes/CustomColorSchemes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","src","alt","customPresetColorsReducer","state","action","type","newState","index","get","color","filter","_unused_","i","customFontsReducer","NEW_PRESET","fill","font","gradient","stroke","customColorSchemesReducer","groupIndex","schemaIndex","clonedState","cloneDeep","map","groups","gi","schemes","si","configReducer","customPresetColors","customFonts","customColorSchemes","defaultVertexStyle","defaultEdgeStyle","initialConfig","getInitialConfig","savedConfig","localStorage","getItem","JSON","parse","error","console","log","joinClassNames","classes","args","forEach","arg","argType","push","Array","isArray","length","inner","key","join","ColorBox","showDelete","presetColors","onChange","onDelete","initialColor","useState","setColor","useEffect","cpColor","colorValue","hex","replace","useColorInput","stateColor","handleColorChange","isOpen","setIsOpen","isWhite","toLowerCase","style","backgroundColor","border","colorClassNames","onClick","defaultProps","Headline","children","React","createElement","Box","title","footer","description","showHead","Button","size","classNames","CustomColors","store","useContext","ConfigurationContext","getState","dispatch","payload","useCustomColors","colors","updateColor","deleteColor","addNewButton","newIndex","Content","ConfigOutput","currState","stringify","CustomFonts","getBackground","useFill","Preview","background","ColorOutput","handleDelete","ResetSchema","Schema","isResetSchema","schema","setSchema","newSchema","useColorChange","handleChange","CustomColorSchemesComponent","useCustomColorSchemes","colorSchemes","updateSchema","deleteSchema","deleteGroup","addGroup","addPreset","addNewGroup","group","colorSchema","createContext","App","configStore","useReducer","config","setItem","useConfigStore","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89556437.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport const Header: React.FC = () => {\n    // const store = useContext(ConfigurationContext);\n\n    return (\n        <div className=\"Header\">\n            <img className=\"Header--logo\" src=\"/drawio-config-logo.svg\" alt=\"Draw.io Configuration Logo\" />\n            <h1>draw.io Configuration</h1>\n        </div>\n    );\n};\n","import { CustomPresetColors, Action, ConfigReducer } from './types';\nimport get from 'lodash/get';\n\nexport const customPresetColorsReducer: ConfigReducer<CustomPresetColors, Action> = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_CUSTOM_COLOR': {\n            const newState = [...state];\n\n            const index = get(action, 'payload.index');\n            const color = get(action, 'payload.color');\n\n            newState[index] = color;\n\n            return newState;\n        }\n        case 'DELETE_CUSTOM_COLOR': {\n            const newState = [...state];\n\n            const index = get(action, 'payload.index');\n\n            return newState.filter((_unused_, i) => {\n                return i !== index;\n            });\n        }\n        default:\n            return state;\n    }\n};\n","import { CustomFonts, Action, ConfigReducer } from './types';\n\nexport const customFontsReducer: ConfigReducer<CustomFonts, Action> = (state, action) => {\n    return state;\n};\n","import { CustomColorSchemes, Action, ConfigReducer } from './types';\nimport get from 'lodash/get';\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst NEW_PRESET = { fill: 'none', font: '#000000', gradient: 'none', stroke: '#000000' };\nconst RESET_PRESET = null;\n\nexport const customColorSchemesReducer: ConfigReducer<CustomColorSchemes, Action> = (state, action) => {\n    const groupIndex = get(action, 'payload.groupIndex');\n    const schemaIndex = get(action, 'payload.schemaIndex');\n\n    switch (action.type) {\n        case 'UPDATE_CUSTOM_COLOR_SCHEMA': {\n            const clonedState = cloneDeep(state);\n\n            clonedState[groupIndex][schemaIndex] = get(action, 'payload.schema');\n\n            return clonedState;\n        }\n        case 'DELETE_CUSTOM_COLOR_SCHEMA': {\n            return state.map((groups, gi) => {\n                if (gi === groupIndex) {\n                    return groups.filter((schemes, si) => {\n                        return si !== schemaIndex;\n                    });\n                }\n\n                return groups;\n            });\n        }\n        case 'ADD_SCHEMA_PRESET': {\n            const clonedState = cloneDeep(state);\n\n            clonedState[groupIndex] = [...clonedState[groupIndex], NEW_PRESET];\n\n            return clonedState;\n        }\n        case 'DELETE_SCHEMA_GROUP': {\n            return state.filter((groups, index) => index !== groupIndex);\n        }\n        case 'ADD_SCHEMA_GROUP': {\n            return [...state, [RESET_PRESET, NEW_PRESET]];\n        }\n        default:\n            return state;\n    }\n};\n","import { customPresetColorsReducer } from './customPresetColors';\nimport { Configuration, Action, ConfigReducer } from './types';\nimport { customFontsReducer } from './customFonts';\nimport { customColorSchemesReducer } from './customColorSchemes';\n\nexport const configReducer: ConfigReducer<Configuration, Action> = (state, action) => {\n    return {\n        customPresetColors: customPresetColorsReducer(state.customPresetColors, action),\n        customFonts: customFontsReducer(state.customFonts, action),\n        customColorSchemes: customColorSchemesReducer(state.customColorSchemes, action),\n        defaultVertexStyle: {},\n        defaultEdgeStyle: {},\n    };\n};\n\nexport const initialConfig: Configuration = {\n    customPresetColors: [\n        'E6D0DE',\n        'CDA2BE',\n        'B5739D',\n        'E1D5E7',\n        'C3ABD0',\n        'A680B8',\n        'D4E1F5',\n        'A9C4EB',\n        '7EA6E0',\n        'D5E8D4',\n        '9AC7BF',\n        '67AB9F',\n\n        'D5E8D4',\n        'B9E0A5',\n        '97D077',\n        'FFF2CC',\n        'FFE599',\n        'FFD966',\n        'FFF4C3',\n        'FFCE9F',\n        'FFB570',\n        'F8CECC',\n        'F19C99',\n        'EA6B66',\n    ],\n    customFonts: ['Segoe UI', 'Segoe Script'],\n    customColorSchemes: [\n        [\n            null,\n            {\n                fill: '#e6d0de',\n                gradient: 'none',\n                stroke: '#cda2be',\n                font: '#b5739d',\n            },\n            {\n                fill: '#d4e1f5',\n                gradient: 'none',\n                stroke: '#a9c4eb',\n                font: '#7ea6e0',\n            },\n            {\n                fill: '#d5e8d4',\n                gradient: 'none',\n                stroke: '#9ac7bf',\n                font: '#67ab9f',\n            },\n            {\n                fill: '#e1d5e7',\n                gradient: 'none',\n                stroke: '#c3abd0',\n                font: '#a680b8',\n            },\n            {\n                fill: '#fff4c3',\n                gradient: 'none',\n                stroke: '#ffce9f',\n                font: '#ffb570',\n            },\n            {\n                fill: '#d5e8d4',\n                gradient: 'none',\n                stroke: '#b9e0a5',\n                font: '#70a057',\n            },\n        ],\n    ],\n    defaultVertexStyle: {},\n    defaultEdgeStyle: {},\n};\n\nexport const getInitialConfig = (): Configuration => {\n    const savedConfig = localStorage.getItem('drawioconfig');\n    if (!savedConfig) {\n        return initialConfig;\n    }\n    try {\n        return JSON.parse(savedConfig);\n    } catch (error) {\n        console.log(error);\n        return initialConfig;\n    }\n};\n","/**\n * joins classnames like\n * https://github.com/JedWatson/classnames/blob/master/index.js\n * @return {string} combined classNames\n */\nexport const joinClassNames = (...args: Array<any>): string => {\n    const classes: Array<string> = [];\n\n    args.forEach(arg => {\n        if (!arg) return;\n\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        } else if (Array.isArray(arg) && arg.length) {\n            const inner = joinClassNames(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        } else if (argType === 'object') {\n            for (const key in arg) {\n                if (arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n\n    return classes.join(' ');\n};\n","import React, { useState, useEffect } from 'react';\nimport './ColorBox.css';\nimport { joinClassNames } from '../../../utils/helpers';\nimport { SketchPicker, ColorChangeHandler } from 'react-color';\nimport { ColorBoxProps, OnChange } from './types';\n\nconst useColorInput = (initialColor: string, onChange: OnChange): [string, ColorChangeHandler] => {\n    const [color, setColor] = useState(initialColor);\n\n    useEffect(() => {\n        setColor(initialColor);\n    }, [initialColor]);\n\n    const handleColorChange: ColorChangeHandler = (cpColor): void => {\n        const colorValue = cpColor.hex.replace('#', '');\n        setColor(colorValue);\n        onChange(colorValue);\n    };\n\n    return [color, handleColorChange];\n};\n\nconst INITIAL_PICKER_STATE = false;\n\nexport const ColorBox: React.FC<ColorBoxProps> = ({\n    showDelete,\n    presetColors,\n    color,\n    onChange,\n    className,\n    onDelete,\n}) => {\n    // const usedColor = color === 'none' ? 'ffffff' : color;\n    const [stateColor, handleColorChange] = useColorInput(color, onChange);\n    const [isOpen, setIsOpen] = useState(INITIAL_PICKER_STATE);\n    const isWhite = stateColor && (stateColor.toLowerCase() === 'fff' || stateColor.toLowerCase() === 'ffffff');\n\n    const style = {\n        backgroundColor: `#${stateColor}`,\n        border: isWhite ? '1px solid #dadce0' : 'none',\n    };\n\n    const isNone = stateColor === 'none';\n\n    const colorClassNames = joinClassNames('ColorBox--color', isNone && 'ColorBox--color--isNone');\n\n    return (\n        <div className={joinClassNames('ColorBox', className)} style={style}>\n            {showDelete && (\n                <div className=\"ColorBox--actions\">\n                    <button className=\"ColorBox--delete\" onClick={(): void => onDelete()} />\n                </div>\n            )}\n            <div className={colorClassNames} onClick={(): void => setIsOpen(!isOpen)}></div>\n            {isOpen && (\n                <div className=\"ColorBox--popover\">\n                    <div className=\"ColorBox--cover\" onClick={(): void => setIsOpen(INITIAL_PICKER_STATE)} />\n                    <SketchPicker presetColors={presetColors} color={stateColor} onChange={handleColorChange} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nColorBox.defaultProps = {\n    showDelete: true,\n};\n","import React from 'react';\nimport './Headline.css';\nimport { joinClassNames } from '../../../utils/helpers';\n\ntype Props = {\n    type: 'h1' | 'h2' | 'h3';\n    className: string;\n};\n\nexport const Headline: React.FC<Props> = ({ type, children, className }) => {\n    // const store = useContext(ConfigurationContext);\n\n    return React.createElement(\n        type,\n        {\n            className: joinClassNames('Headline', `Headline-${type}`, className),\n        },\n        children,\n    );\n};\n","import React, { ReactNode } from 'react';\nimport './Box.css';\nimport { Headline } from '../Headline';\n\ntype Props = {\n    title?: ReactNode;\n    description?: ReactNode;\n    footer?: ReactNode;\n};\n\nexport const Box: React.FC<Props> = ({ children, title, footer, description }) => {\n    const showHead = !!title || !!description;\n\n    return (\n        <div className=\"Box\">\n            {showHead && (\n                <div className=\"Box--head\">\n                    {title && (\n                        <Headline type=\"h2\" className=\"Box--title\">\n                            {title}\n                        </Headline>\n                    )}\n                    {description && <div className=\"Box--description\">{description}</div>}\n                </div>\n            )}\n            <div className=\"Box--content\">{children}</div>\n            <div className=\"Box--footer\">{footer}</div>\n        </div>\n    );\n};\n","import React, { MouseEventHandler } from 'react';\nimport './Button.css';\nimport { joinClassNames } from '../../../utils/helpers';\n\ntype Props = {\n    type?: 'primary' | 'default';\n    size?: 'small' | 'normal' | 'big';\n    onClick: MouseEventHandler;\n};\n\nexport const Button: React.FC<Props> = ({ type, size, children, onClick }) => {\n    const classNames = joinClassNames('Button', `Button--${type}`, `Button--${size}`);\n\n    return (\n        <button className={classNames} onClick={onClick}>\n            {children}\n        </button>\n    );\n};\n\nButton.defaultProps = {\n    type: 'default',\n    size: 'normal',\n};\n","import React, { useContext, ReactNode, MouseEventHandler } from 'react';\nimport './CustomColors.css';\nimport { ConfigurationContext } from '../../App';\nimport { CustomPresetColors } from '../../state/types';\nimport { ColorBox } from '../Elements/ColorBox';\nimport { Box } from '../Elements/Box';\nimport { Button } from '../Elements/Button';\n\ntype UpdateColor = (index: number) => (color: string) => void;\ntype DeleteColor = (index: number) => () => void;\n\nconst useCustomColors = (): [CustomPresetColors, UpdateColor, DeleteColor] => {\n    const store = useContext(ConfigurationContext);\n    const state = store.getState();\n\n    const updateColor: UpdateColor = index => (color): void => {\n        store.dispatch({\n            type: 'UPDATE_CUSTOM_COLOR',\n            payload: {\n                index: index,\n                color: color,\n            },\n        });\n    };\n\n    const deleteColor: DeleteColor = index => (): void => {\n        store.dispatch({\n            type: 'DELETE_CUSTOM_COLOR',\n            payload: {\n                index: index,\n            },\n        });\n    };\n\n    return [state.customPresetColors, updateColor, deleteColor];\n};\n\nexport const CustomColors: React.FC = () => {\n    const [colors, updateColor, deleteColor] = useCustomColors();\n\n    const handleAddNewUpdate: MouseEventHandler = () => {\n        const newIndex = colors.length;\n        updateColor(newIndex)('ffffff');\n    };\n\n    const addNewButton: ReactNode = <Button onClick={handleAddNewUpdate}>add new color</Button>;\n    const description: ReactNode = (\n        <div>\n            The following colors will be shown in the color overlay in draw.io.\n            <br />\n            Click on a color box to set a new color or click the trashbin to delete a color from the list.\n        </div>\n    );\n\n    return (\n        <Box title=\"Custom Preset Colors\" footer={addNewButton} description={description}>\n            <div className=\"CustomColors--palette\">\n                {colors.map((color, i) => {\n                    return (\n                        <ColorBox\n                            key={`color-${i}`}\n                            className=\"CustomColors--item\"\n                            color={color}\n                            onChange={updateColor(i)}\n                            onDelete={deleteColor(i)}\n                        />\n                    );\n                })}\n            </div>\n        </Box>\n    );\n};\n","import React from 'react';\nimport './Content.css';\n\ntype Props = {};\n\nexport const Content: React.FC<Props> = ({ children }) => {\n    return <div className=\"Content\">{children}</div>;\n};\n","import React, { useContext, useEffect } from 'react';\nimport './ConfigOutput.css';\nimport { Box } from '../Elements/Box';\nimport { ConfigurationContext } from '../../App';\n\ntype Props = {};\n\nexport const ConfigOutput: React.FC<Props> = ({ children }) => {\n    const store = useContext(ConfigurationContext);\n    const currState = store.getState();\n\n    return (\n        <div className=\"ConfigOutput\">\n            <Box title=\"Copy Configuration\">\n                <pre>{JSON.stringify(currState, null, 2)}</pre>\n            </Box>\n        </div>\n    );\n};\n","import React from 'react';\nimport './CustomFonts.css';\nimport { Box } from '../Elements/Box';\n\ntype CustomFontsProps = {};\n\nexport const CustomFonts: React.FC<CustomFontsProps> = ({}) => {\n    return (\n        <Box title=\"Custom Fonts\" description=\"Work in progress …\" footer={''}>\n            <div className=\"CustomFonts\"></div>;\n        </Box>\n    );\n};\n","import React from 'react';\nimport './Preview.css';\n\ntype PreviewProps = {\n    fill?: string;\n    gradient?: string;\n    stroke?: string;\n    font?: string;\n};\n\nconst DEFAULT_TEXT_COLOR = '#000000';\n\nconst getBackground = (fill = '', gradient = ''): string => {\n    const useFill = fill && fill !== 'none' ? fill : 'transparent';\n\n    if (!gradient || gradient === 'none') {\n        return useFill;\n    }\n\n    return `linear-gradient(to right, ${useFill}, ${gradient})`;\n};\n\nexport const Preview: React.FC<PreviewProps> = ({ fill, gradient, stroke, font }) => {\n    const border = stroke && stroke !== 'none' ? `1px solid ${stroke}` : 'none';\n\n    const style = {\n        background: getBackground(fill, gradient),\n        border,\n        color: font && font !== 'none' ? font : DEFAULT_TEXT_COLOR,\n    };\n\n    return (\n        <div className=\"Preview\" style={style}>\n            <div className=\"Preview--box\">Preview</div>\n        </div>\n    );\n};\n","import React, { useContext } from 'react';\nimport './ColorOutput.css';\nimport { ColorBox } from '../Elements/ColorBox';\nimport { CustomPresetColors, CustomColorSchema } from '../../state/types';\nimport { ConfigurationContext } from '../../App';\n\ntype ColorOutputProps = {\n    type: keyof CustomColorSchema;\n    color?: string;\n    onChange: (type: ColorOutputProps['type'], color: string) => void;\n    onDelete?: (type: ColorOutputProps['type'], color: string) => void;\n};\n\nconst useCustomColors = (): [CustomPresetColors] => {\n    const store = useContext(ConfigurationContext);\n    const state = store.getState();\n\n    return [state.customPresetColors.map(color => `#${color}`)];\n};\n\nexport const ColorOutput: React.FC<ColorOutputProps> = ({ type, color, onChange }) => {\n    const [presetColors] = useCustomColors();\n\n    const handleChange = (color: string): void => {\n        onChange(type, `#${color}`);\n    };\n\n    const handleDelete = (): void => {\n        onChange(type, 'none');\n    };\n\n    const colorValue = color?.replace('#', '') || 'ffffff';\n\n    return (\n        <div className=\"ColorOutput\">\n            <div className=\"ColorOutput--color\">\n                <ColorBox\n                    className=\"ColorOutput--colorBox\"\n                    color={colorValue}\n                    onChange={handleChange}\n                    onDelete={handleDelete}\n                    showDelete={false}\n                    presetColors={presetColors}\n                />\n            </div>\n            <div className=\"ColorOutput--title\" onClick={handleDelete}>\n                {type}\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport './Schema.css';\nimport { Preview } from './Preview';\nimport { ColorOutput } from './ColorOutput';\nimport { CustomColorSchema } from '../../state/types';\n\ntype SchemaProps = CustomColorSchema & {\n    onChange: (schema: CustomColorSchema) => void;\n    onDelete: () => void;\n};\n\ntype ChangeHandler = (type: keyof CustomColorSchema, color: string) => void;\ntype DeleteHandler = () => void;\n\nconst ResetSchema: React.FC<{}> = () => {\n    return (\n        <div className=\"Schema Schema--reset\">\n            <div className=\"Schema--reset-title\">Reset Schema</div>\n        </div>\n    );\n};\n\nconst useColorChange = (\n    onChange: (schema: CustomColorSchema) => void,\n    onDelete: () => void,\n    fill?: string,\n    gradient?: string,\n    stroke?: string,\n    font?: string,\n): [CustomColorSchema, ChangeHandler, DeleteHandler] => {\n    const [schema, setSchema] = useState({\n        fill,\n        gradient,\n        stroke,\n        font,\n    });\n\n    useEffect(() => {\n        setSchema({\n            fill,\n            gradient,\n            stroke,\n            font,\n        });\n    }, [fill, gradient, stroke, font]);\n\n    const handleChange: ChangeHandler = (type, color) => {\n        const newSchema = {\n            ...schema,\n            [type]: color,\n        };\n        setSchema(newSchema);\n\n        onChange({\n            ...schema,\n            [type]: color,\n        });\n    };\n\n    const handleDelete: DeleteHandler = () => {\n        onDelete();\n    };\n\n    return [schema, handleChange, handleDelete];\n};\n\nexport const Schema: React.FC<SchemaProps> = ({ fill, gradient, stroke, font, onChange, onDelete }) => {\n    const isResetSchema = !fill && !gradient && !stroke && !font;\n\n    const [schema, handleChange, handleDelete] = useColorChange(onChange, onDelete, fill, gradient, stroke, font);\n\n    if (isResetSchema) {\n        return <ResetSchema />;\n    }\n\n    return (\n        <div className=\"Schema\">\n            <Preview fill={fill} gradient={schema.gradient} stroke={stroke} font={font} />\n            <div className=\"Schema--colors\">\n                <ColorOutput type=\"fill\" color={schema.fill} onChange={handleChange} />\n                <ColorOutput type=\"stroke\" color={schema.stroke} onChange={handleChange} />\n                <ColorOutput type=\"gradient\" color={schema.gradient} onChange={handleChange} />\n                <ColorOutput type=\"font\" color={schema.font} onChange={handleChange} />\n                <div className=\"Schema--delete\" title=\"Delete color preset\" onClick={handleDelete}>\n                    ×\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useContext, ReactNode } from 'react';\nimport './CustomColorSchemes.css';\nimport { Box } from '../Elements/Box';\nimport { CustomColorSchemes, CustomColorSchema } from '../../state/types';\nimport { ConfigurationContext } from '../../App';\nimport { Schema } from './Schema';\nimport { Button } from '../Elements/Button';\n\ntype CustomColorSchemesProps = {};\ntype UpdateColorSchema = (groupIndex: number, schemaIndex: number) => (schema: CustomColorSchema) => void;\ntype DeleteColorSchema = (groupIndex: number, schemaIndex: number) => () => void;\ntype DeleteSchemaGroup = (groupIndex: number) => () => void;\ntype AddNewSchemaGroup = () => void;\ntype AddNewPreset = (groupIndex: number) => () => void;\n\nconst useCustomColorSchemes = (): [\n    CustomColorSchemes,\n    UpdateColorSchema,\n    DeleteColorSchema,\n    DeleteSchemaGroup,\n    AddNewSchemaGroup,\n    AddNewPreset,\n] => {\n    const store = useContext(ConfigurationContext);\n    const state = store.getState();\n\n    const updateSchema: UpdateColorSchema = (groupIndex, schemaIndex) => (schema): void => {\n        store.dispatch({\n            type: 'UPDATE_CUSTOM_COLOR_SCHEMA',\n            payload: {\n                groupIndex,\n                schemaIndex,\n                schema,\n            },\n        });\n    };\n\n    const deleteSchema: DeleteColorSchema = (groupIndex, schemaIndex) => (): void => {\n        store.dispatch({\n            type: 'DELETE_CUSTOM_COLOR_SCHEMA',\n            payload: {\n                groupIndex,\n                schemaIndex,\n                schema: {},\n            },\n        });\n    };\n\n    const deleteGroup: DeleteSchemaGroup = groupIndex => (): void => {\n        store.dispatch({\n            type: 'DELETE_SCHEMA_GROUP',\n            payload: {\n                groupIndex,\n            },\n        });\n    };\n\n    const addNewSchemaGroup: AddNewSchemaGroup = () => {\n        store.dispatch({\n            type: 'ADD_SCHEMA_GROUP',\n        });\n    };\n\n    const addPreset: AddNewPreset = groupIndex => (): void => {\n        store.dispatch({\n            type: 'ADD_SCHEMA_PRESET',\n            payload: {\n                groupIndex,\n            },\n        });\n    };\n\n    return [state.customColorSchemes, updateSchema, deleteSchema, deleteGroup, addNewSchemaGroup, addPreset];\n};\n\nexport const CustomColorSchemesComponent: React.FC<CustomColorSchemesProps> = ({}) => {\n    const [colorSchemes, updateSchema, deleteSchema, deleteGroup, addGroup, addPreset] = useCustomColorSchemes();\n\n    const addNewGroup: ReactNode = (\n        <div>\n            <Button onClick={addGroup}>add new preset slide</Button>;\n        </div>\n    );\n\n    const description: ReactNode = (\n        <div>\n            Color schemes will be shown in draw.io on the right top in the preset panel. Here you are able to add custom\n            presets.\n            <br />\n            Presets can be organized in different slides.\n        </div>\n    );\n\n    return (\n        <Box title=\"Custom Color Schemes\" footer={addNewGroup} description={description}>\n            <div className=\"CustomColorSchemes\">\n                {colorSchemes.map((group, groupIndex) => {\n                    return [\n                        <div key=\"delete\" className=\"CustomColorSchemes--delete\">\n                            <a onClick={deleteGroup(groupIndex)}>delete Slide</a>\n                        </div>,\n                        <div className=\"CustomColorSchemes--group\" key={`group-${groupIndex}`}>\n                            {group.map((colorSchema, schemaIndex) => {\n                                return (\n                                    <Schema\n                                        key={`schema-${schemaIndex}`}\n                                        {...colorSchema}\n                                        onDelete={deleteSchema(groupIndex, schemaIndex)}\n                                        onChange={updateSchema(groupIndex, schemaIndex)}\n                                    />\n                                );\n                            })}\n                            <div className=\"CustomColorSchemes--new\">\n                                <Button onClick={addPreset(groupIndex)}>Add Preset</Button>\n                            </div>\n                        </div>,\n                    ];\n                })}\n            </div>\n        </Box>\n    );\n};\n","import React, { useReducer, Context, createContext, Dispatch, useEffect } from 'react';\nimport './App.css';\nimport { Header } from './components/Elements/Header';\nimport { configReducer, getInitialConfig } from './state';\nimport { Configuration, UseConfigStore, ConfigStore, Action } from './state/types';\nimport { CustomColors } from './components/CustomColors';\nimport { Content } from './components/Elements/Content';\nimport { ConfigOutput } from './components/ConfigOutput';\nimport { CustomFonts } from './components/CustomFonts';\nimport { CustomColorSchemes } from './components/CustomColorSchemes';\n\nexport const ConfigurationContext: Context<ConfigStore<Configuration>> = createContext({\n    getState: () => getInitialConfig(),\n    dispatch: (() => undefined) as Dispatch<Action>,\n});\n\nconst useConfigStore: UseConfigStore<Configuration> = () => {\n    const [config, dispatch] = useReducer(configReducer, getInitialConfig());\n\n    const getState = (): Configuration => config;\n\n    useEffect(() => {\n        localStorage.setItem('drawioconfig', JSON.stringify(config, null, 2));\n    }, [config]);\n\n    return {\n        getState,\n        dispatch,\n    };\n};\n\nconst App: React.FC = () => {\n    const configStore = useConfigStore();\n\n    return (\n        <ConfigurationContext.Provider value={configStore}>\n            <div className=\"App\">\n                <Header />\n                <Content>\n                    <div className=\"App--layout\">\n                        <div className=\"App--main\">\n                            <CustomColors />\n                            <CustomColorSchemes />\n                            <CustomFonts />\n                        </div>\n                        <div className=\"App--side\">\n                            <ConfigOutput />\n                        </div>\n                    </div>\n                </Content>\n            </div>\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}